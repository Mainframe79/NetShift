name: Build, Sign, and Release NetShift

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  actions: read
  contents: write
  packages: write
  id-token: write

env:
  SIGN_CODE: false # ðŸ”¥ Toggle code signing
  BASE_DIR: D:\a\NetShift\NetShift
  ARTIFACTS_DIR: D:\a\NetShift\NetShift\artifacts
  SolutionPath: D:\a\NetShift\NetShift\NetShift.sln
  SetupPath: D:\a\NetShift\NetShift\NetShiftSetup
  NetShiftBin: D:\a\NetShift\NetShift\NetShiftMain\bin\x64\Release\net8.0-windows\net8.0-windows
  NetShiftExe: D:\a\NetShift\NetShift\NetShiftMain\bin\x64\Release\net8.0-windows\net8.0-windows\NetShiftMain.exe
  NetShiftServiceBin: D:\a\NetShift\NetShift\NetShiftService\bin\x64\Release
  NetShiftServiceExe: D:\a\NetShift\NetShift\NetShiftService\bin\x64\Release\NetShiftService.exe
  NetShiftInstallerExe: D:\a\NetShift\NetShift\artifacts\NetShiftInstaller.exe
  RCEDIT_PATH: D:\a\NetShift\NetShift\tools\rcedit\rcedit-x64.exe

jobs:
  build-sign-release:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: NetShift

      - name: Debug repository structure
        run: dir "D:\a\NetShift\NetShift" -Recurse
        shell: powershell

      - name: Download NuGet CLI
        run: |
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
        shell: powershell
        working-directory: D:\a\NetShift

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Create artifacts directory
        run: New-Item -ItemType Directory -Force -Path "${{ env.ARTIFACTS_DIR }}"
        shell: powershell

      - name: Restore NuGet packages
        run: |
          .\nuget.exe restore "${{ env.SolutionPath }}" -Verbosity detailed
        shell: powershell
        working-directory: D:\a\NetShift

      - name: Build NetShiftMain project
        run: msbuild NetShiftMain\NetShiftMain.csproj /p:Configuration=Release /p:Platform=x64
        env:
          UseSharedCompilation: false
        working-directory: D:\a\NetShift

      - name: Debug build output directory before stamping
        run: dir "${{ env.NetShiftBin }}" -Recurse
        shell: powershell
        continue-on-error: true

      - name: Stamp version into NetShiftMain.exe
        run: |
          & "${{ env.RCEDIT_PATH }}" "${{ env.NetShiftExe }}" --set-version-string "ProductVersion" "${{ github.ref_name }}"
          & "${{ env.RCEDIT_PATH }}" "${{ env.NetShiftExe }}" --set-version-string "FileVersion" "${{ github.ref_name }}"
        shell: powershell

      - name: Rebuild NetShiftMain project after stamping
        run: msbuild NetShiftMain\NetShiftMain.csproj /p:Configuration=Release /p:Platform=x64
        env:
          UseSharedCompilation: false
        working-directory: D:\a\NetShift

      - name: Conditionally sign NetShiftMain.exe
        if: env.SIGN_CODE == 'true'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.CODESIGN_USERNAME }}
          password: ${{ secrets.CODESIGN_PASSWORD }}
          credential_id: ${{ secrets.CODESIGN_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.CODESIGN_TOTP_SECRET }}
          file_path: ${{ env.NetShiftExe }}
          output_dir_path: ${{ env.ARTIFACTS_DIR }}
          environment_name: PROD
          signing_method: v2
          malware_block: false

      - name: Replace NetShiftMain.exe with signed version
        if: env.SIGN_CODE == 'true'
        run: Copy-Item "${{ env.ARTIFACTS_DIR }}\NetShiftMain.exe" "${{ env.NetShiftExe }}" -Force
        shell: powershell

      - name: Build NetShiftService project
        run: msbuild NetShiftService\NetShiftService.csproj /p:Configuration=Release /p:Platform=x64
        env:
          UseSharedCompilation: false
        working-directory: D:\a\NetShift

      - name: Stamp version into NetShiftService.exe
        run: |
          & "${{ env.RCEDIT_PATH }}" "${{ env.NetShiftServiceExe }}" --set-version-string "ProductVersion" "${{ github.ref_name }}"
          & "${{ env.RCEDIT_PATH }}" "${{ env.NetShiftServiceExe }}" --set-version-string "FileVersion" "${{ github.ref_name }}"
        shell: powershell

      - name: Rebuild NetShiftService project after stamping
        run: msbuild NetShiftService\NetShiftService.csproj /p:Configuration=Release /p:Platform=x64
        env:
          UseSharedCompilation: false
        working-directory: D:\a\NetShift

      - name: Conditionally sign NetShiftService.exe
        if: env.SIGN_CODE == 'true'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.CODESIGN_USERNAME }}
          password: ${{ secrets.CODESIGN_PASSWORD }}
          credential_id: ${{ secrets.CODESIGN_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.CODESIGN_TOTP_SECRET }}
          file_path: ${{ env.NetShiftServiceExe }}
          output_dir_path: ${{ env.ARTIFACTS_DIR }}
          environment_name: PROD
          signing_method: v2
          malware_block: false

      - name: Replace NetShiftService.exe with signed version
        if: env.SIGN_CODE == 'true'
        run: Copy-Item "${{ env.ARTIFACTS_DIR }}\NetShiftService.exe" "${{ env.NetShiftServiceExe }}" -Force
        shell: powershell

      - name: Debug build output directory
        run: dir "${{ env.NetShiftBin }}" -Recurse
        shell: powershell
        continue-on-error: true

      - name: Debug alternative NetShift build output directory
        run: dir "D:\a\NetShift\NetShiftMain\bin\x64\Release\net8.0-windows" -Recurse
        shell: powershell
        continue-on-error: true

      - name: Debug NetShiftService output directory
        run: dir "${{ env.NetShiftServiceBin }}" -Recurse
        shell: powershell
        continue-on-error: true

      - name: Download and Install Inno Setup
        run: |
          Invoke-WebRequest -Uri https://jrsoftware.org/download.php/is.exe -OutFile inno-setup-installer.exe
          Start-Process -FilePath .\inno-setup-installer.exe -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART" -Wait
        shell: powershell
        working-directory: D:\a\NetShift

      - name: Build Inno Setup Installer
        run: |
          $env:Path += ";C:\Program Files (x86)\Inno Setup 6"
          ISCC.exe "${{ env.SetupPath }}\setup.iss" > "${{ env.ARTIFACTS_DIR }}\iscc.log" 2>&1
          if ($LASTEXITCODE -ne 0) {
            Get-Content "${{ env.ARTIFACTS_DIR }}\iscc.log"
            exit $LASTEXITCODE
          }
        shell: powershell
        working-directory: D:\a\NetShift

      - name: Conditionally sign NetShiftInstaller.exe
        if: env.SIGN_CODE == 'true'
        uses: sslcom/esigner-codesign@develop
        with:
          command: sign
          username: ${{ secrets.CODESIGN_USERNAME }}
          password: ${{ secrets.CODESIGN_PASSWORD }}
          credential_id: ${{ secrets.CODESIGN_CREDENTIAL_ID }}
          totp_secret: ${{ secrets.CODESIGN_TOTP_SECRET }}
          file_path: ${{ env.NetShiftInstallerExe }}
          output_dir_path: ${{ env.ARTIFACTS_DIR }}
          environment_name: PROD
          signing_method: v2
          malware_block: false

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NetShift-Installer
          path: ${{ env.NetShiftInstallerExe }}
          retention-days: 7

  release:
    needs: build-sign-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: NetShift-Installer
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/NetShiftInstaller.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
